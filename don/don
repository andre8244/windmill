#!/bin/bash

#
# Copyright (C) 2017 Nethesis S.r.l.
# http://www.nethesis.it
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# WindMill is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License.
# If not, see COPYING.
#

guard=0
timeout=60
socket=/var/run/don/management
credentials=/var/run/don/credentials

init="init"
pidof systemd  &>/dev/null
if [ $? -eq 0 ]; then
    init="systemd"
fi

if [ "$init" == "systemd" ]; then
    socket=/run/don/management
    credentials=/run/don/credentials
else
    # Make sure base system dir exists
    mkdir -p $(dirname $socket)
fi


function show_credentials
{
    if [ -f $credentials ]; then
        echo -n "Server ID:"
        echo -e "\t"$(sed -n '1{p;q}' $credentials)
        echo -n "Session ID:"
        echo -e "\t"$(sed -n '2{p;q}' $credentials)
    fi
}

function start
{
    if [ "$init" == "systemd" ]; then
        systemctl start $1
    else
        service $1 start
    fi
}

function stop
{
    if [ "$init" == "systemd" ]; then
        systemctl stop $1
    else
        service $1 stop
    fi
}

function status
{
    if [ "$init" == "systemd" ]; then
        systemctl --lines 0 status don-openvpn
        ret1=$?
        systemctl --lines 0 status don-sshd
        ret2=$?
    else
        service don-openvpn status
        ret1=$?
        service don-sshd status
        ret2=$?
    fi

    return $((ret1+ret2))
}

case "$1" in
start)
    start don-openvpn
    while [ ! -S $socket ]
    do
        sleep 1
        guard=$((guard+1))
        if [ $guard -gt $timeout ]; then
            echo "[ERROR] don-openvpn connection failed: no socket found ($socket)"
            exit 7
        fi
    done

    until (echo state | nc -U $socket | grep -q CONNECTED)
    do
        sleep 1
        guard=$((guard+1))
        if [ $guard -gt $timeout ]; then
            echo "[ERROR] don-openvpn connection failed: can't connect to remote server"
            exit 8
        fi
    done
    start don-sshd
    show_credentials
;;
stop)
    stop don-sshd
    stop don-openvpn
;;
status)
    show_credentials
    status
    exit $?
;;
*)
    echo $"Usage: $0 {start|stop|status}"
    exit 2
esac
